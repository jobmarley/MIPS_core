#*****************************************************************************************
# Vivado (TM) v2021.2 (64-bit)
#
# MIPS_core_vivado.tcl: Tcl script for re-creating project 'MIPS_core_vivado'
#
# Generated by Vivado on Wed Jul 13 02:04:31 +0200 2022
# IP Build 3369179 on Thu Oct 21 08:25:16 MDT 2021
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (MIPS_core_vivado.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    "design_1_mig_7series_0_0/mig_a.prj"
#    "design_1_mig_7series_0_0/mig_b.prj"
#    "constraints/KC705_test.xdc"
#    "constraints/KC705_target_constraints.xdc"
#    "constraints/example_top.xdc"
#    "constraints/KC705_Rev1_0_U1.ucf.xdc"
#
# 3. The following remote source files that were added to the original project:-
#
#    "../MIPS_core/core/axi_helper.vhd"
#    "../MIPS_core/debugger/mips_debugger.vhd"
#    "../MIPS_core/core/mips_utils.vhd"
#    "../MIPS_core/core/mips_execution_unit.vhd"
#    "../MIPS_core/core/skid_buffer.vhd"
#    "../MIPS_core/core/mips_core.vhd"
#    "../MIPS_core/core/xdma_test.vhd"
#    "../MIPS_core/cache/cache_memory.vhd"
#    "../MIPS_core/cache/cache_performance_test.vhd"
#    "../MIPS_core/debugger/test/debugger_test_traffic_data.coe"
#    "../MIPS_core/debugger/test/debugger_test_traffic_address.coe"
#    "../MIPS_core/debugger/test/debugger_test_traffic_mask.coe"
#    "../MIPS_core/debugger/test/debugger_test_traffic_control.coe"
#    "../MIPS_core/cache/cache_memory_data.coe"
#    "../MIPS_core/core/axi_lite_adapter/axi_lite_adapter.vhd"
#    "../MIPS_core/core/axi_lite_adapter/axi_lite_adapter_test_data.coe"
#    "../MIPS_core/core/test/core_test_traffic_init_data.coe"
#    "../MIPS_core/core/test/core_test_traffic_init_address.coe"
#    "../MIPS_core/core/test/core_test_traffic_data.coe"
#    "../MIPS_core/core/test/core_test_traffic_address.coe"
#    "../MIPS_core/core/test/core_test_traffic_mask.coe"
#    "../MIPS_core/core/test/core_test_traffic_control.coe"
#    "../MIPS_core/core/mips_core_test.vhd"
#    "../MIPS_core/core/axi_lite_adapter/axi_lite_adapter_test_design.vhd"
#    "../MIPS_core/cache/cache_design_test.vhd"
#    "../MIPS_core/debugger/mips_debugger_test.vhd"
#    "../MIPS_core/core/axi_helper.vhd"
#
#*****************************************************************************************

# Check file required for this script exists
proc checkRequiredFiles { origin_dir} {
  set status true
  set files [list \
   "design_1_mig_7series_0_0/mig_a.prj" \
   "design_1_mig_7series_0_0/mig_b.prj" \
   "constraints/KC705_test.xdc" \
   "constraints/KC705_target_constraints.xdc" \
   "constraints/example_top.xdc" \
   "constraints/KC705_Rev1_0_U1.ucf.xdc" \
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find local file $ifile "
      set status false
    }
  }

  set files [list \
 "[file normalize "$origin_dir/../MIPS_core/core/axi_helper.vhd"]"\
 "[file normalize "$origin_dir/../MIPS_core/debugger/mips_debugger.vhd"]"\
 "[file normalize "$origin_dir/../MIPS_core/core/mips_utils.vhd"]"\
 "[file normalize "$origin_dir/../MIPS_core/core/mips_execution_unit.vhd"]"\
 "[file normalize "$origin_dir/../MIPS_core/core/skid_buffer.vhd"]"\
 "[file normalize "$origin_dir/../MIPS_core/core/mips_core.vhd"]"\
 "[file normalize "$origin_dir/../MIPS_core/core/xdma_test.vhd"]"\
 "[file normalize "$origin_dir/../MIPS_core/cache/cache_memory.vhd"]"\
 "[file normalize "$origin_dir/../MIPS_core/cache/cache_performance_test.vhd"]"\
 "[file normalize "$origin_dir/../MIPS_core/debugger/test/debugger_test_traffic_data.coe"]"\
 "[file normalize "$origin_dir/../MIPS_core/debugger/test/debugger_test_traffic_address.coe"]"\
 "[file normalize "$origin_dir/../MIPS_core/debugger/test/debugger_test_traffic_mask.coe"]"\
 "[file normalize "$origin_dir/../MIPS_core/debugger/test/debugger_test_traffic_control.coe"]"\
 "[file normalize "$origin_dir/../MIPS_core/cache/cache_memory_data.coe"]"\
 "[file normalize "$origin_dir/../MIPS_core/core/axi_lite_adapter/axi_lite_adapter.vhd"]"\
 "[file normalize "$origin_dir/../MIPS_core/core/axi_lite_adapter/axi_lite_adapter_test_data.coe"]"\
 "[file normalize "$origin_dir/../MIPS_core/core/test/core_test_traffic_init_data.coe"]"\
 "[file normalize "$origin_dir/../MIPS_core/core/test/core_test_traffic_init_address.coe"]"\
 "[file normalize "$origin_dir/../MIPS_core/core/test/core_test_traffic_data.coe"]"\
 "[file normalize "$origin_dir/../MIPS_core/core/test/core_test_traffic_address.coe"]"\
 "[file normalize "$origin_dir/../MIPS_core/core/test/core_test_traffic_mask.coe"]"\
 "[file normalize "$origin_dir/../MIPS_core/core/test/core_test_traffic_control.coe"]"\
 "[file normalize "$origin_dir/../MIPS_core/core/mips_core_test.vhd"]"\
 "[file normalize "$origin_dir/../MIPS_core/core/axi_lite_adapter/axi_lite_adapter_test_design.vhd"]"\
 "[file normalize "$origin_dir/../MIPS_core/cache/cache_design_test.vhd"]"\
 "[file normalize "$origin_dir/../MIPS_core/debugger/mips_debugger_test.vhd"]"\
 "[file normalize "$origin_dir/../MIPS_core/core/axi_helper.vhd"]"\
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find remote file $ifile "
      set status false
    }
  }

  return $status
}
# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "MIPS_core_vivado"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "MIPS_core_vivado.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir ""

# Check for paths and files needed for project creation
set validate_required 0
if { $validate_required } {
  if { [checkRequiredFiles $origin_dir] } {
    puts "Tcl file $script_file is valid. All files required for project creation is accesable. "
  } else {
    puts "Tcl file $script_file is not valid. Not all files required for project creation is accesable. "
    return
  }
}

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xc7k325tffg900-2

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "board_part" -value "xilinx.com:kc705:part0:1.6" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "${_xil_proj_name_}/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "platform.board_id" -value "kc705" -objects $obj
set_property -name "revised_directory_structure" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "${_xil_proj_name_}/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "target_language" -value "VHDL" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "131" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "131" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "131" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "131" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "131" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "131" -objects $obj
set_property -name "webtalk.xsim_launch_sim" -value "680" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC XPM_FIFO XPM_MEMORY" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/../MIPS_core/core/axi_helper.vhd"] \
 [file normalize "${origin_dir}/../MIPS_core/debugger/mips_debugger.vhd"] \
 [file normalize "${origin_dir}/../MIPS_core/core/mips_utils.vhd"] \
 [file normalize "${origin_dir}/../MIPS_core/core/mips_execution_unit.vhd"] \
 [file normalize "${origin_dir}/../MIPS_core/core/skid_buffer.vhd"] \
 [file normalize "${origin_dir}/../MIPS_core/core/mips_core.vhd"] \
 [file normalize "${origin_dir}/../MIPS_core/core/xdma_test.vhd"] \
 [file normalize "${origin_dir}/../MIPS_core/cache/cache_memory.vhd"] \
 [file normalize "${origin_dir}/../MIPS_core/cache/cache_performance_test.vhd"] \
 [file normalize "${origin_dir}/../MIPS_core/debugger/test/debugger_test_traffic_data.coe"] \
 [file normalize "${origin_dir}/../MIPS_core/debugger/test/debugger_test_traffic_address.coe"] \
 [file normalize "${origin_dir}/../MIPS_core/debugger/test/debugger_test_traffic_mask.coe"] \
 [file normalize "${origin_dir}/../MIPS_core/debugger/test/debugger_test_traffic_control.coe"] \
 [file normalize "${origin_dir}/../MIPS_core/cache/cache_memory_data.coe"] \
 [file normalize "${origin_dir}/../MIPS_core/core/axi_lite_adapter/axi_lite_adapter.vhd"] \
 [file normalize "${origin_dir}/../MIPS_core/core/axi_lite_adapter/axi_lite_adapter_test_data.coe"] \
 [file normalize "${origin_dir}/../MIPS_core/core/test/core_test_traffic_init_data.coe"] \
 [file normalize "${origin_dir}/../MIPS_core/core/test/core_test_traffic_init_address.coe"] \
 [file normalize "${origin_dir}/../MIPS_core/core/test/core_test_traffic_data.coe"] \
 [file normalize "${origin_dir}/../MIPS_core/core/test/core_test_traffic_address.coe"] \
 [file normalize "${origin_dir}/../MIPS_core/core/test/core_test_traffic_mask.coe"] \
 [file normalize "${origin_dir}/../MIPS_core/core/test/core_test_traffic_control.coe"] \
]
add_files -norecurse -fileset $obj $files

# Import local files from the original project
set files [list \
 "design_1_mig_7series_0_0/mig_a.prj"\
 "design_1_mig_7series_0_0/mig_b.prj"\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/../MIPS_core/core/axi_helper.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../MIPS_core/debugger/mips_debugger.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../MIPS_core/core/mips_utils.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../MIPS_core/core/mips_execution_unit.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../MIPS_core/core/skid_buffer.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../MIPS_core/core/mips_core.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../MIPS_core/core/xdma_test.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../MIPS_core/cache/cache_memory.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../MIPS_core/cache/cache_performance_test.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../MIPS_core/core/axi_lite_adapter/axi_lite_adapter.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj


# Set 'sources_1' fileset file properties for local files
set file "design_1_mig_7series_0_0/mig_a.prj"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "scoped_to_cells" -value "design_1_mig_7series_0_0" -objects $file_obj

set file "design_1_mig_7series_0_0/mig_b.prj"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "scoped_to_cells" -value "design_1_mig_7series_0_0" -objects $file_obj


# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "xdma_test" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/constraints/KC705_test.xdc"]"
set file_imported [import_files -fileset constrs_1 [list $file]]
set file "constraints/KC705_test.xdc"
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/constraints/KC705_target_constraints.xdc"]"
set file_imported [import_files -fileset constrs_1 [list $file]]
set file "constraints/KC705_target_constraints.xdc"
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/constraints/example_top.xdc"]"
set file_imported [import_files -fileset constrs_1 [list $file]]
set file "constraints/example_top.xdc"
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/constraints/KC705_Rev1_0_U1.ucf.xdc"]"
set file_imported [import_files -fileset constrs_1 [list $file]]
set file "constraints/KC705_Rev1_0_U1.ucf.xdc"
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property -name "target_constrs_file" -value "[get_files *constraints/KC705_target_constraints.xdc]" -objects $obj
set_property -name "target_ucf" -value "[get_files *constraints/KC705_target_constraints.xdc]" -objects $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
set files [list \
 [file normalize "${origin_dir}/../MIPS_core/core/mips_core_test.vhd"] \
 [file normalize "${origin_dir}/../MIPS_core/core/axi_lite_adapter/axi_lite_adapter_test_design.vhd"] \
 [file normalize "${origin_dir}/../MIPS_core/cache/cache_design_test.vhd"] \
 [file normalize "${origin_dir}/../MIPS_core/debugger/mips_debugger_test.vhd"] \
 [file normalize "${origin_dir}/../MIPS_core/core/axi_helper.vhd"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sim_1' fileset file properties for remote files
set file "$origin_dir/../MIPS_core/core/mips_core_test.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../MIPS_core/core/axi_lite_adapter/axi_lite_adapter_test_design.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../MIPS_core/cache/cache_design_test.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../MIPS_core/debugger/mips_debugger_test.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../MIPS_core/core/axi_helper.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj


# Set 'sim_1' fileset file properties for local files
# None

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "source_set" -value "" -objects $obj
set_property -name "top" -value "mips_core_unit_test" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj
set_property -name "xsim.simulate.runtime" -value "50ms" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]


# Adding sources referenced in BDs, if not already added
if { [get_files axi_helper.vhd] == "" } {
  import_files -quiet -fileset sources_1 ../MIPS_core/core/axi_helper.vhd
}
if { [get_files mips_debugger.vhd] == "" } {
  import_files -quiet -fileset sources_1 ../MIPS_core/debugger/mips_debugger.vhd
}
if { [get_files mips_utils.vhd] == "" } {
  import_files -quiet -fileset sources_1 ../MIPS_core/core/mips_utils.vhd
}
if { [get_files mips_execution_unit.vhd] == "" } {
  import_files -quiet -fileset sources_1 ../MIPS_core/core/mips_execution_unit.vhd
}
if { [get_files skid_buffer.vhd] == "" } {
  import_files -quiet -fileset sources_1 ../MIPS_core/core/skid_buffer.vhd
}
if { [get_files mips_core.vhd] == "" } {
  import_files -quiet -fileset sources_1 ../MIPS_core/core/mips_core.vhd
}


# Proc to create BD design_1
proc cr_bd_design_1 { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# mips_core



  # CHANGE DESIGN NAME HERE
  set design_name design_1

  common::send_gid_msg -ssname BD::TCL -id 2010 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:mig_7series:4.2\
  xilinx.com:ip:proc_sys_reset:5.0\
  xilinx.com:ip:util_ds_buf:2.2\
  xilinx.com:ip:util_vector_logic:2.0\
  xilinx.com:ip:xdma:4.1\
  xilinx.com:ip:xlconstant:1.1\
  "

   set list_ips_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2011 -severity "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2012 -severity "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  mips_core\
  "

   set list_mods_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2020 -severity "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2021 -severity "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_gid_msg -ssname BD::TCL -id 2022 -severity "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_gid_msg -ssname BD::TCL -id 2023 -severity "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }


##################################################################
# MIG PRJ FILE TCL PROCs
##################################################################

proc write_mig_file_design_1_mig_7series_0_0 { str_mig_prj_filepath } {

   file mkdir [ file dirname "$str_mig_prj_filepath" ]
   set mig_prj_file [open $str_mig_prj_filepath  w+]

   puts $mig_prj_file {﻿<?xml version="1.0" encoding="UTF-8" standalone="no" ?>}
   puts $mig_prj_file {<Project NoOfControllers="1">}
   puts $mig_prj_file {  }
   puts $mig_prj_file {<!-- IMPORTANT: This is an internal file that has been generated by the MIG software. Any direct editing or changes made to this file may result in unpredictable behavior or data corruption. It is strongly advised that users do not edit the contents of this file. Re-run the MIG GUI with the required settings if any of the options provided below need to be altered. -->}
   puts $mig_prj_file {  <ModuleName>design_1_mig_7series_0_0</ModuleName>}
   puts $mig_prj_file {  <dci_inouts_inputs>1</dci_inouts_inputs>}
   puts $mig_prj_file {  <dci_inputs>1</dci_inputs>}
   puts $mig_prj_file {  <Debug_En>OFF</Debug_En>}
   puts $mig_prj_file {  <DataDepth_En>1024</DataDepth_En>}
   puts $mig_prj_file {  <LowPower_En>ON</LowPower_En>}
   puts $mig_prj_file {  <XADC_En>Enabled</XADC_En>}
   puts $mig_prj_file {  <TargetFPGA>xc7k325t-ffg900/-2</TargetFPGA>}
   puts $mig_prj_file {  <Version>4.2</Version>}
   puts $mig_prj_file {  <SystemClock>Differential</SystemClock>}
   puts $mig_prj_file {  <ReferenceClock>Use System Clock</ReferenceClock>}
   puts $mig_prj_file {  <SysResetPolarity>ACTIVE LOW</SysResetPolarity>}
   puts $mig_prj_file {  <BankSelectionFlag>FALSE</BankSelectionFlag>}
   puts $mig_prj_file {  <InternalVref>0</InternalVref>}
   puts $mig_prj_file {  <dci_hr_inouts_inputs>50 Ohms</dci_hr_inouts_inputs>}
   puts $mig_prj_file {  <dci_cascade>1</dci_cascade>}
   puts $mig_prj_file {  <Controller number="0">}
   puts $mig_prj_file {    <MemoryDevice>DDR3_SDRAM/SODIMMs/MT8JTF12864HZ-1G6</MemoryDevice>}
   puts $mig_prj_file {    <TimePeriod>1250</TimePeriod>}
   puts $mig_prj_file {    <VccAuxIO>2.0V</VccAuxIO>}
   puts $mig_prj_file {    <PHYRatio>4:1</PHYRatio>}
   puts $mig_prj_file {    <InputClkFreq>200</InputClkFreq>}
   puts $mig_prj_file {    <UIExtraClocks>1</UIExtraClocks>}
   puts $mig_prj_file {    <MMCM_VCO>800</MMCM_VCO>}
   puts $mig_prj_file {    <MMCMClkOut0> 8.000</MMCMClkOut0>}
   puts $mig_prj_file {    <MMCMClkOut1>16</MMCMClkOut1>}
   puts $mig_prj_file {    <MMCMClkOut2>1</MMCMClkOut2>}
   puts $mig_prj_file {    <MMCMClkOut3>1</MMCMClkOut3>}
   puts $mig_prj_file {    <MMCMClkOut4>1</MMCMClkOut4>}
   puts $mig_prj_file {    <DataWidth>64</DataWidth>}
   puts $mig_prj_file {    <DeepMemory>1</DeepMemory>}
   puts $mig_prj_file {    <DataMask>1</DataMask>}
   puts $mig_prj_file {    <ECC>Disabled</ECC>}
   puts $mig_prj_file {    <Ordering>Normal</Ordering>}
   puts $mig_prj_file {    <BankMachineCnt>4</BankMachineCnt>}
   puts $mig_prj_file {    <CustomPart>FALSE</CustomPart>}
   puts $mig_prj_file {    <NewPartName/>}
   puts $mig_prj_file {    <RowAddress>14</RowAddress>}
   puts $mig_prj_file {    <ColAddress>10</ColAddress>}
   puts $mig_prj_file {    <BankAddress>3</BankAddress>}
   puts $mig_prj_file {    <MemoryVoltage>1.5V</MemoryVoltage>}
   puts $mig_prj_file {    <C0_MEM_SIZE>1073741824</C0_MEM_SIZE>}
   puts $mig_prj_file {    <UserMemoryAddressMap>BANK_ROW_COLUMN</UserMemoryAddressMap>}
   puts $mig_prj_file {    <PinSelection>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AH12" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_addr[0]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AF13" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_addr[10]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AE13" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_addr[11]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AJ11" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_addr[12]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AH11" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_addr[13]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AG13" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_addr[1]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AG12" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_addr[2]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AF12" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_addr[3]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AJ12" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_addr[4]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AJ13" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_addr[5]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AJ14" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_addr[6]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AH14" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_addr[7]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AK13" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_addr[8]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AK14" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_addr[9]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AH9" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_ba[0]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AG9" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_ba[1]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AK9" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_ba[2]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AC11" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_cas_n"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15" PADName="AH10" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_ck_n[0]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15" PADName="AG10" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_ck_p[0]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AF10" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_cke[0]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AC12" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_cs_n[0]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="Y16" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dm[0]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AB17" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dm[1]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AF17" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dm[2]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AE16" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dm[3]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AK5" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dm[4]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AJ3" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dm[5]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AF6" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dm[6]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AC7" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dm[7]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AA15" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[0]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AC19" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[10]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AD17" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[11]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AA18" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[12]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AB18" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[13]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AE18" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[14]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AD18" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[15]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AG19" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[16]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AK19" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[17]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AG18" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[18]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AF18" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[19]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AA16" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[1]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AH19" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[20]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AJ19" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[21]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AE19" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[22]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AD19" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[23]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AK16" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[24]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AJ17" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[25]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AG15" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[26]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AF15" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[27]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AH17" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[28]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AG14" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[29]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AC14" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[2]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AH15" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[30]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AK15" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[31]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AK8" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[32]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AK6" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[33]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AG7" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[34]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AF7" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[35]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AF8" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[36]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AK4" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[37]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AJ8" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[38]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AJ6" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[39]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AD14" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[3]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AH5" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[40]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AH6" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[41]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AJ2" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[42]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AH2" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[43]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AH4" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[44]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AJ4" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[45]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AK1" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[46]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AJ1" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[47]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AF1" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[48]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AF2" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[49]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AA17" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[4]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AE4" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[50]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AE3" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[51]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AF3" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[52]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AF5" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[53]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AE1" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[54]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AE5" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[55]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AC1" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[56]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AD3" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[57]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AC4" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[58]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AC5" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[59]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AB15" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[5]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AE6" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[60]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AD6" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[61]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AC2" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[62]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AD4" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[63]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AE15" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[6]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="Y15" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[7]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AB19" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[8]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15_T_DCI" PADName="AD16" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dq[9]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="AC15" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dqs_n[0]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="Y18" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dqs_n[1]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="AK18" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dqs_n[2]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="AJ16" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dqs_n[3]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="AJ7" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dqs_n[4]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="AH1" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dqs_n[5]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="AG3" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dqs_n[6]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="AD1" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dqs_n[7]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="AC16" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dqs_p[0]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="Y19" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dqs_p[1]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="AJ18" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dqs_p[2]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="AH16" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dqs_p[3]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="AH7" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dqs_p[4]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="AG2" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dqs_p[5]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="AG4" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dqs_p[6]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL15_T_DCI" PADName="AD2" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_dqs_p[7]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AD8" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_odt[0]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AD9" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_ras_n"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="LVCMOS15" PADName="AK3" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_reset_n"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="SSTL15" PADName="AE9" SLEW="FAST" VCCAUX_IO="HIGH" name="ddr3_we_n"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="LVCMOS15" PADName="AB8" SLEW="SLOW" VCCAUX_IO="" name="led[0]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="LVCMOS15" PADName="AA8" SLEW="SLOW" VCCAUX_IO="" name="led[1]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="LVCMOS15" PADName="AC9" SLEW="SLOW" VCCAUX_IO="" name="led[2]"/>}
   puts $mig_prj_file {      <Pin IN_TERM="" IOSTANDARD="LVCMOS15" PADName="AB9" SLEW="SLOW" VCCAUX_IO="" name="led[3]"/>}
   puts $mig_prj_file {    </PinSelection>}
   puts $mig_prj_file {    <System_Clock>}
   puts $mig_prj_file {      <Pin Bank="33" PADName="AD12/AD11(CC_P/N)" name="sys_clk_p/n"/>}
   puts $mig_prj_file {    </System_Clock>}
   puts $mig_prj_file {    <System_Control>}
   puts $mig_prj_file {      <Pin Bank="Select Bank" PADName="No connect" name="sys_rst"/>}
   puts $mig_prj_file {      <Pin Bank="Select Bank" PADName="No connect" name="init_calib_complete"/>}
   puts $mig_prj_file {      <Pin Bank="Select Bank" PADName="No connect" name="tg_compare_error"/>}
   puts $mig_prj_file {    </System_Control>}
   puts $mig_prj_file {    <TimingParameters>}
   puts $mig_prj_file {      <Parameters tcke="5" tfaw="30" tras="35" trcd="13.75" trefi="7.8" trfc="110" trp="13.75" trrd="6" trtp="7.5" twtr="7.5"/>}
   puts $mig_prj_file {    </TimingParameters>}
   puts $mig_prj_file {    <mrBurstLength name="Burst Length">8 - Fixed</mrBurstLength>}
   puts $mig_prj_file {    <mrBurstType name="Read Burst Type and Length">Sequential</mrBurstType>}
   puts $mig_prj_file {    <mrCasLatency name="CAS Latency">11</mrCasLatency>}
   puts $mig_prj_file {    <mrMode name="Mode">Normal</mrMode>}
   puts $mig_prj_file {    <mrDllReset name="DLL Reset">No</mrDllReset>}
   puts $mig_prj_file {    <mrPdMode name="DLL control for precharge PD">Slow Exit</mrPdMode>}
   puts $mig_prj_file {    <emrDllEnable name="DLL Enable">Enable</emrDllEnable>}
   puts $mig_prj_file {    <emrOutputDriveStrength name="Output Driver Impedance Control">RZQ/7</emrOutputDriveStrength>}
   puts $mig_prj_file {    <emrMirrorSelection name="Address Mirroring">Disable</emrMirrorSelection>}
   puts $mig_prj_file {    <emrCSSelection name="Controller Chip Select Pin">Enable</emrCSSelection>}
   puts $mig_prj_file {    <emrRTT name="RTT (nominal) - On Die Termination (ODT)">RZQ/6</emrRTT>}
   puts $mig_prj_file {    <emrPosted name="Additive Latency (AL)">0</emrPosted>}
   puts $mig_prj_file {    <emrOCD name="Write Leveling Enable">Disabled</emrOCD>}
   puts $mig_prj_file {    <emrDQS name="TDQS enable">Enabled</emrDQS>}
   puts $mig_prj_file {    <emrRDQS name="Qoff">Output Buffer Enabled</emrRDQS>}
   puts $mig_prj_file {    <mr2PartialArraySelfRefresh name="Partial-Array Self Refresh">Full Array</mr2PartialArraySelfRefresh>}
   puts $mig_prj_file {    <mr2CasWriteLatency name="CAS write latency">8</mr2CasWriteLatency>}
   puts $mig_prj_file {    <mr2AutoSelfRefresh name="Auto Self Refresh">Enabled</mr2AutoSelfRefresh>}
   puts $mig_prj_file {    <mr2SelfRefreshTempRange name="High Temparature Self Refresh Rate">Normal</mr2SelfRefreshTempRange>}
   puts $mig_prj_file {    <mr2RTTWR name="RTT_WR - Dynamic On Die Termination (ODT)">Dynamic ODT off</mr2RTTWR>}
   puts $mig_prj_file {    <PortInterface>AXI</PortInterface>}
   puts $mig_prj_file {    <AXIParameters>}
   puts $mig_prj_file {      <C0_C_RD_WR_ARB_ALGORITHM>RD_PRI_REG</C0_C_RD_WR_ARB_ALGORITHM>}
   puts $mig_prj_file {      <C0_S_AXI_ADDR_WIDTH>30</C0_S_AXI_ADDR_WIDTH>}
   puts $mig_prj_file {      <C0_S_AXI_DATA_WIDTH>512</C0_S_AXI_DATA_WIDTH>}
   puts $mig_prj_file {      <C0_S_AXI_ID_WIDTH>2</C0_S_AXI_ID_WIDTH>}
   puts $mig_prj_file {      <C0_S_AXI_SUPPORTS_NARROW_BURST>1</C0_S_AXI_SUPPORTS_NARROW_BURST>}
   puts $mig_prj_file {    </AXIParameters>}
   puts $mig_prj_file {  </Controller>}
   puts $mig_prj_file {</Project>}

   close $mig_prj_file
}
# End of write_mig_file_design_1_mig_7series_0_0()



  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports
  set DDR3_0 [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:ddrx_rtl:1.0 DDR3_0 ]

  set PCIE_REFCLK [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 PCIE_REFCLK ]

  set SYS_CLK [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 SYS_CLK ]

  set pcie_mgt_0 [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:pcie_7x_mgt_rtl:1.0 pcie_mgt_0 ]


  # Create ports
  set LEDS [ create_bd_port -dir O -from 7 -to 0 LEDS ]
  set PCIE_PERST_LS [ create_bd_port -dir I -type rst PCIE_PERST_LS ]
  set debug [ create_bd_port -dir O -from 0 -to 0 -type data debug ]
  set debug_2 [ create_bd_port -dir O -from 0 -to 0 debug_2 ]
  set debug_3 [ create_bd_port -dir O debug_3 ]

  # Create instance: axi_interconnect_0, and set properties
  set axi_interconnect_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:2.1 axi_interconnect_0 ]
  set_property -dict [ list \
   CONFIG.NUM_MI {2} \
   CONFIG.NUM_SI {4} \
 ] $axi_interconnect_0

  # Create instance: mig_7series_0, and set properties
  set mig_7series_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:mig_7series:4.2 mig_7series_0 ]

  # Generate the PRJ File for MIG
  set str_mig_folder [get_property IP_DIR [ get_ips [ get_property CONFIG.Component_Name $mig_7series_0 ] ] ]
  set str_mig_file_name mig_a.prj
  set str_mig_file_path ${str_mig_folder}/${str_mig_file_name}

  write_mig_file_design_1_mig_7series_0_0 $str_mig_file_path

  set_property -dict [ list \
   CONFIG.BOARD_MIG_PARAM {Custom} \
   CONFIG.RESET_BOARD_INTERFACE {Custom} \
   CONFIG.XML_INPUT_FILE {mig_a.prj} \
 ] $mig_7series_0

  # Create instance: mips_core_0, and set properties
  set block_name mips_core
  set block_cell_name mips_core_0
  if { [catch {set mips_core_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mips_core_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: proc_sys_reset_0, and set properties
  set proc_sys_reset_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset:5.0 proc_sys_reset_0 ]

  # Create instance: util_ds_buf_0, and set properties
  set util_ds_buf_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_ds_buf:2.2 util_ds_buf_0 ]
  set_property -dict [ list \
   CONFIG.C_BUF_TYPE {IBUFDSGTE} \
   CONFIG.DIFF_CLK_IN_BOARD_INTERFACE {pcie_refclk} \
 ] $util_ds_buf_0

  # Create instance: util_vector_logic_0, and set properties
  set util_vector_logic_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic:2.0 util_vector_logic_0 ]
  set_property -dict [ list \
   CONFIG.C_OPERATION {not} \
   CONFIG.C_SIZE {1} \
   CONFIG.LOGO_FILE {data/sym_notgate.png} \
 ] $util_vector_logic_0

  # Create instance: xdma_0, and set properties
  set xdma_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xdma:4.1 xdma_0 ]
  set_property -dict [ list \
   CONFIG.PCIE_BOARD_INTERFACE {pci_express_x1} \
   CONFIG.SYS_RST_N_BOARD_INTERFACE {pcie_perstn} \
   CONFIG.axi_bypass_64bit_en {true} \
   CONFIG.axil_master_64bit_en {false} \
   CONFIG.axilite_master_en {false} \
   CONFIG.axilite_master_scale {Kilobytes} \
   CONFIG.axilite_master_size {4} \
   CONFIG.axist_bypass_en {true} \
   CONFIG.axist_bypass_scale {Kilobytes} \
   CONFIG.axist_bypass_size {4} \
   CONFIG.axisten_freq {125} \
   CONFIG.cfg_mgmt_if {false} \
   CONFIG.mode_selection {Basic} \
   CONFIG.pcie_extended_tag {true} \
   CONFIG.pciebar2axibar_axist_bypass {0x0000000080000000} \
   CONFIG.pf0_base_class_menu {Memory_controller} \
   CONFIG.pf0_class_code {058000} \
   CONFIG.pf0_class_code_base {05} \
   CONFIG.pf0_class_code_interface {00} \
   CONFIG.pf0_class_code_sub {80} \
   CONFIG.pf0_interrupt_pin {NONE} \
   CONFIG.pf0_link_status_slot_clock_config {true} \
   CONFIG.pf0_msix_cap_pba_bir {BAR_1:0} \
   CONFIG.pf0_msix_cap_pba_offset {00000000} \
   CONFIG.pf0_msix_cap_table_bir {BAR_1:0} \
   CONFIG.pf0_msix_cap_table_offset {00000000} \
   CONFIG.pf0_msix_cap_table_size {000} \
   CONFIG.pf0_msix_enabled {false} \
   CONFIG.pf0_sub_class_interface_menu {Other_memory_controller} \
   CONFIG.xdma_axi_intf_mm {AXI_Memory_Mapped} \
   CONFIG.xdma_axilite_slave {false} \
   CONFIG.xdma_pcie_64bit_en {true} \
   CONFIG.xdma_rnum_chnl {1} \
   CONFIG.xdma_sts_ports {false} \
 ] $xdma_0

  # Create instance: xlconstant_1, and set properties
  set xlconstant_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_1 ]

  # Create interface connections
  connect_bd_intf_net -intf_net CLK_IN_D_0_1 [get_bd_intf_ports PCIE_REFCLK] [get_bd_intf_pins util_ds_buf_0/CLK_IN_D]
  connect_bd_intf_net -intf_net SYS_CLK_0_1 [get_bd_intf_ports SYS_CLK] [get_bd_intf_pins mig_7series_0/SYS_CLK]
  connect_bd_intf_net -intf_net axi_interconnect_0_M00_AXI [get_bd_intf_pins axi_interconnect_0/M00_AXI] [get_bd_intf_pins mig_7series_0/S_AXI]
  connect_bd_intf_net -intf_net axi_interconnect_0_M01_AXI [get_bd_intf_pins axi_interconnect_0/M01_AXI] [get_bd_intf_pins mips_core_0/s_axil_debug]
  connect_bd_intf_net -intf_net mig_7series_0_DDR3 [get_bd_intf_ports DDR3_0] [get_bd_intf_pins mig_7series_0/DDR3]
  connect_bd_intf_net -intf_net mips_core_0_m_axi_memb [get_bd_intf_pins axi_interconnect_0/S03_AXI] [get_bd_intf_pins mips_core_0/m_axi_memb]
  connect_bd_intf_net -intf_net mips_core_0_m_axil_mema [get_bd_intf_pins axi_interconnect_0/S02_AXI] [get_bd_intf_pins mips_core_0/m_axil_mema]
  connect_bd_intf_net -intf_net xdma_0_M_AXI [get_bd_intf_pins axi_interconnect_0/S00_AXI] [get_bd_intf_pins xdma_0/M_AXI]
  connect_bd_intf_net -intf_net xdma_0_M_AXI_BYPASS [get_bd_intf_pins axi_interconnect_0/S01_AXI] [get_bd_intf_pins xdma_0/M_AXI_BYPASS]
  connect_bd_intf_net -intf_net xdma_0_pcie_mgt [get_bd_intf_ports pcie_mgt_0] [get_bd_intf_pins xdma_0/pcie_mgt]

  # Create port connections
  connect_bd_net -net PCIE_PERST_LS_1 [get_bd_ports PCIE_PERST_LS] [get_bd_pins xdma_0/sys_rst_n]
  connect_bd_net -net mig_7series_0_mmcm_locked [get_bd_ports debug_3] [get_bd_pins mig_7series_0/mmcm_locked] [get_bd_pins proc_sys_reset_0/dcm_locked]
  connect_bd_net -net mig_7series_0_ui_addn_clk_0 [get_bd_pins axi_interconnect_0/M01_ACLK] [get_bd_pins axi_interconnect_0/S02_ACLK] [get_bd_pins axi_interconnect_0/S03_ACLK] [get_bd_pins mig_7series_0/ui_addn_clk_1] [get_bd_pins mips_core_0/clock] [get_bd_pins proc_sys_reset_0/slowest_sync_clk]
  connect_bd_net -net mig_7series_0_ui_clk [get_bd_pins axi_interconnect_0/ACLK] [get_bd_pins axi_interconnect_0/M00_ACLK] [get_bd_pins mig_7series_0/ui_clk]
  connect_bd_net -net mig_7series_0_ui_clk_sync_rst [get_bd_pins mig_7series_0/ui_clk_sync_rst] [get_bd_pins util_vector_logic_0/Op1]
  connect_bd_net -net mips_core_0_LEDS [get_bd_ports LEDS] [get_bd_pins mips_core_0/LEDS]
  connect_bd_net -net mips_core_0_interrupt [get_bd_pins mips_core_0/interrupt] [get_bd_pins xdma_0/usr_irq_req]
  connect_bd_net -net proc_sys_reset_0_peripheral_aresetn [get_bd_ports debug] [get_bd_pins mips_core_0/resetn] [get_bd_pins proc_sys_reset_0/peripheral_aresetn]
  connect_bd_net -net util_ds_buf_0_IBUF_OUT [get_bd_pins util_ds_buf_0/IBUF_OUT] [get_bd_pins xdma_0/sys_clk]
  connect_bd_net -net util_vector_logic_0_Res [get_bd_ports debug_2] [get_bd_pins proc_sys_reset_0/aux_reset_in] [get_bd_pins util_vector_logic_0/Res]
  connect_bd_net -net xdma_0_axi_aclk [get_bd_pins axi_interconnect_0/S00_ACLK] [get_bd_pins axi_interconnect_0/S01_ACLK] [get_bd_pins mips_core_0/xdma_clock] [get_bd_pins xdma_0/axi_aclk]
  connect_bd_net -net xdma_0_axi_aresetn [get_bd_pins axi_interconnect_0/S00_ARESETN] [get_bd_pins axi_interconnect_0/S01_ARESETN] [get_bd_pins xdma_0/axi_aresetn]
  connect_bd_net -net xdma_0_usr_irq_ack [get_bd_pins mips_core_0/interrupt_ack] [get_bd_pins xdma_0/usr_irq_ack]
  connect_bd_net -net xlconstant_1_dout [get_bd_pins axi_interconnect_0/ARESETN] [get_bd_pins axi_interconnect_0/M00_ARESETN] [get_bd_pins axi_interconnect_0/M01_ARESETN] [get_bd_pins axi_interconnect_0/S02_ARESETN] [get_bd_pins axi_interconnect_0/S03_ARESETN] [get_bd_pins proc_sys_reset_0/interconnect_aresetn]
  connect_bd_net -net xlconstant_1_dout1 [get_bd_pins mig_7series_0/aresetn] [get_bd_pins mig_7series_0/sys_rst] [get_bd_pins proc_sys_reset_0/ext_reset_in] [get_bd_pins xlconstant_1/dout]

  # Create address segments
  assign_bd_address -offset 0x00000000 -range 0x40000000 -target_address_space [get_bd_addr_spaces mips_core_0/m_axi_memb] [get_bd_addr_segs mig_7series_0/memmap/memaddr] -force
  assign_bd_address -offset 0x00000000 -range 0x40000000 -target_address_space [get_bd_addr_spaces mips_core_0/m_axil_mema] [get_bd_addr_segs mig_7series_0/memmap/memaddr] -force
  assign_bd_address -offset 0x80000000 -range 0x00001000 -target_address_space [get_bd_addr_spaces mips_core_0/m_axi_memb] [get_bd_addr_segs mips_core_0/s_axil_debug/reg0] -force
  assign_bd_address -offset 0x80000000 -range 0x00001000 -target_address_space [get_bd_addr_spaces mips_core_0/m_axil_mema] [get_bd_addr_segs mips_core_0/s_axil_debug/reg0] -force
  assign_bd_address -offset 0x00000000 -range 0x40000000 -target_address_space [get_bd_addr_spaces xdma_0/M_AXI] [get_bd_addr_segs mig_7series_0/memmap/memaddr] -force
  assign_bd_address -offset 0x80000000 -range 0x00001000 -target_address_space [get_bd_addr_spaces xdma_0/M_AXI_BYPASS] [get_bd_addr_segs mips_core_0/s_axil_debug/reg0] -force

  # Exclude Address Segments
  exclude_bd_addr_seg -offset 0x80000000 -range 0x00001000 -target_address_space [get_bd_addr_spaces xdma_0/M_AXI] [get_bd_addr_segs mips_core_0/s_axil_debug/reg0]
  exclude_bd_addr_seg -offset 0x00000000 -range 0x40000000 -target_address_space [get_bd_addr_spaces xdma_0/M_AXI_BYPASS] [get_bd_addr_segs mig_7series_0/memmap/memaddr]

  # Perform GUI Layout
  regenerate_bd_layout -layout_string {
   "ActiveEmotionalView":"Default View",
   "Default View_ScaleFactor":"0.606612",
   "Default View_TopLeft":"-320,0",
   "ExpandedHierarchyInLayout":"",
   "guistr":"# # String gsaved with Nlview 7.0r6  2020-01-29 bk=1.5227 VDI=41 GEI=36 GUI=JA:10.0 non-TLS
#  -string -flagsOSRD
preplace port pcie_mgt_0 -pg 1 -lvl 5 -x 1500 -y 100 -defaultsOSRD
preplace port PCIE_REFCLK -pg 1 -lvl 0 -x 0 -y 130 -defaultsOSRD
preplace port DDR3_0 -pg 1 -lvl 5 -x 1500 -y 770 -defaultsOSRD
preplace port SYS_CLK -pg 1 -lvl 0 -x 0 -y 820 -defaultsOSRD
preplace port port-id_PCIE_PERST_LS -pg 1 -lvl 0 -x 0 -y 200 -defaultsOSRD
preplace port port-id_debug_3 -pg 1 -lvl 5 -x 1500 -y 870 -defaultsOSRD
preplace portBus LEDS -pg 1 -lvl 5 -x 1500 -y 700 -defaultsOSRD
preplace portBus debug -pg 1 -lvl 5 -x 1500 -y 970 -defaultsOSRD
preplace portBus debug_2 -pg 1 -lvl 5 -x 1500 -y 1180 -defaultsOSRD
preplace inst xdma_0 -pg 1 -lvl 2 -x 510 -y 140 -defaultsOSRD
preplace inst util_ds_buf_0 -pg 1 -lvl 1 -x 170 -y 130 -defaultsOSRD
preplace inst mig_7series_0 -pg 1 -lvl 4 -x 1270 -y 830 -defaultsOSRD
preplace inst xlconstant_1 -pg 1 -lvl 3 -x 910 -y 1050 -defaultsOSRD
preplace inst axi_interconnect_0 -pg 1 -lvl 3 -x 910 -y 330 -defaultsOSRD
preplace inst proc_sys_reset_0 -pg 1 -lvl 4 -x 1270 -y 1080 -defaultsOSRD
preplace inst util_vector_logic_0 -pg 1 -lvl 3 -x 910 -y 1150 -defaultsOSRD
preplace inst mips_core_0 -pg 1 -lvl 2 -x 510 -y 670 -defaultsOSRD
preplace netloc PCIE_PERST_LS_1 1 0 2 20J 60 310J
preplace netloc mig_7series_0_mmcm_locked 1 3 2 1100 710 1480
preplace netloc mig_7series_0_ui_addn_clk_0 1 1 4 340 770 730 690 1080 690 1450
preplace netloc mig_7series_0_ui_clk 1 2 3 740 570 NJ 570 1460
preplace netloc mig_7series_0_ui_clk_sync_rst 1 2 3 750 950 NJ 950 1440
preplace netloc mips_core_0_LEDS 1 2 3 NJ 700 NJ 700 NJ
preplace netloc mips_core_0_interrupt 1 1 2 310 280 670
preplace netloc proc_sys_reset_0_peripheral_aresetn 1 1 4 320 960 NJ 960 NJ 960 1480
preplace netloc util_ds_buf_0_IBUF_OUT 1 1 1 NJ 120
preplace netloc util_vector_logic_0_Res 1 3 2 1070 1180 NJ
preplace netloc xdma_0_axi_aclk 1 1 2 330 360 700
preplace netloc xdma_0_axi_aresetn 1 2 1 690 160n
preplace netloc xdma_0_usr_irq_ack 1 1 2 310 290 680
preplace netloc xlconstant_1_dout 1 2 3 750 580 NJ 580 1470
preplace netloc xlconstant_1_dout1 1 3 1 1090 840n
preplace netloc CLK_IN_D_0_1 1 0 1 NJ 130
preplace netloc SYS_CLK_0_1 1 0 4 NJ 820 NJ 820 NJ 820 NJ
preplace netloc axi_interconnect_0_M00_AXI 1 3 1 1070 320n
preplace netloc axi_interconnect_0_M01_AXI 1 1 3 340 560 NJ 560 1060
preplace netloc mig_7series_0_DDR3 1 4 1 NJ 770
preplace netloc mips_core_0_m_axi_memb 1 2 1 720 220n
preplace netloc mips_core_0_m_axil_mema 1 2 1 710 200n
preplace netloc xdma_0_M_AXI 1 2 1 750 60n
preplace netloc xdma_0_M_AXI_BYPASS 1 2 1 740 80n
preplace netloc xdma_0_pcie_mgt 1 2 3 NJ 100 NJ 100 NJ
levelinfo -pg 1 0 170 510 910 1270 1500
pagesize -pg 1 -db -bbox -sgen -150 0 1640 1210
"
}

  # Restore current instance
  current_bd_instance $oldCurInst

  validate_bd_design
  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_design_1()
cr_bd_design_1 ""
set_property REGISTERED_WITH_MANAGER "1" [get_files design_1.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files design_1.bd ] 

if { [get_files axi_helper.vhd] == "" } {
  import_files -quiet -fileset sources_1 ../MIPS_core/core/axi_helper.vhd
}
if { [get_files cache_memory.vhd] == "" } {
  import_files -quiet -fileset sources_1 ../MIPS_core/cache/cache_memory.vhd
}


# Proc to create BD cache_performance_test_design
proc cr_bd_cache_performance_test_design { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# cache_memory



  # CHANGE DESIGN NAME HERE
  set design_name cache_performance_test_design

  common::send_gid_msg -ssname BD::TCL -id 2010 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:axi_bram_ctrl:4.1\
  xilinx.com:ip:blk_mem_gen:8.4\
  xilinx.com:ip:clk_wiz:6.0\
  "

   set list_ips_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2011 -severity "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2012 -severity "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  cache_memory\
  "

   set list_mods_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2020 -severity "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2021 -severity "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_gid_msg -ssname BD::TCL -id 2022 -severity "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_gid_msg -ssname BD::TCL -id 2023 -severity "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports
  set CLK_IN1_D_0 [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 CLK_IN1_D_0 ]


  # Create ports
  set clk_out1_0 [ create_bd_port -dir O -type clk clk_out1_0 ]
  set porta_address_0 [ create_bd_port -dir I -from 31 -to 0 porta_address_0 ]
  set porta_address_ready_0 [ create_bd_port -dir O porta_address_ready_0 ]
  set porta_address_valid_0 [ create_bd_port -dir I porta_address_valid_0 ]
  set porta_read_data_0 [ create_bd_port -dir O -from 31 -to 0 porta_read_data_0 ]
  set porta_read_data_ready_0 [ create_bd_port -dir I porta_read_data_ready_0 ]
  set porta_read_data_valid_0 [ create_bd_port -dir O porta_read_data_valid_0 ]
  set portb_address_0 [ create_bd_port -dir I -from 31 -to 0 portb_address_0 ]
  set portb_address_ready_0 [ create_bd_port -dir O portb_address_ready_0 ]
  set portb_address_valid_0 [ create_bd_port -dir I portb_address_valid_0 ]
  set portb_read_data_0 [ create_bd_port -dir O -from 31 -to 0 portb_read_data_0 ]
  set portb_read_data_ready_0 [ create_bd_port -dir I portb_read_data_ready_0 ]
  set portb_read_data_valid_0 [ create_bd_port -dir O portb_read_data_valid_0 ]
  set portb_write_0 [ create_bd_port -dir I portb_write_0 ]
  set portb_write_data_0 [ create_bd_port -dir I -from 31 -to 0 portb_write_data_0 ]
  set portb_write_strobe_0 [ create_bd_port -dir I -from 3 -to 0 portb_write_strobe_0 ]

  # Create instance: axi_bram_ctrl_0, and set properties
  set axi_bram_ctrl_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_0 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {512} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_0

  # Create instance: blk_mem_gen_0, and set properties
  set blk_mem_gen_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_0 ]

  # Create instance: blk_mem_gen_1, and set properties
  set blk_mem_gen_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_1 ]
  set_property -dict [ list \
   CONFIG.Byte_Size {8} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Read_Width_A {16} \
   CONFIG.Read_Width_B {16} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {true} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {256} \
   CONFIG.Write_Width_A {16} \
   CONFIG.Write_Width_B {16} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_1

  # Create instance: cache_memory_0, and set properties
  set block_name cache_memory
  set block_cell_name cache_memory_0
  if { [catch {set cache_memory_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $cache_memory_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: clk_wiz_0, and set properties
  set clk_wiz_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz:6.0 clk_wiz_0 ]
  set_property -dict [ list \
   CONFIG.CLKIN1_JITTER_PS {50.0} \
   CONFIG.CLKOUT1_JITTER {112.316} \
   CONFIG.CLKOUT1_PHASE_ERROR {89.971} \
   CONFIG.CLK_IN1_BOARD_INTERFACE {sys_diff_clock} \
   CONFIG.MMCM_CLKFBOUT_MULT_F {5.000} \
   CONFIG.MMCM_CLKIN1_PERIOD {5.000} \
   CONFIG.MMCM_CLKIN2_PERIOD {10.0} \
   CONFIG.PRIM_SOURCE {Differential_clock_capable_pin} \
   CONFIG.USE_RESET {false} \
 ] $clk_wiz_0

  # Create interface connections
  connect_bd_intf_net -intf_net CLK_IN1_D_0_1 [get_bd_intf_ports CLK_IN1_D_0] [get_bd_intf_pins clk_wiz_0/CLK_IN1_D]
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_0/BRAM_PORTA]
  connect_bd_intf_net -intf_net cache_memory_0_BRAM [get_bd_intf_pins blk_mem_gen_1/BRAM_PORTA] [get_bd_intf_pins cache_memory_0/BRAM]
  connect_bd_intf_net -intf_net cache_memory_0_M_AXI [get_bd_intf_pins axi_bram_ctrl_0/S_AXI] [get_bd_intf_pins cache_memory_0/M_AXI]

  # Create port connections
  connect_bd_net -net cache_memory_0_porta_address_ready [get_bd_ports porta_address_ready_0] [get_bd_pins cache_memory_0/porta_address_ready]
  connect_bd_net -net cache_memory_0_porta_read_data [get_bd_ports porta_read_data_0] [get_bd_pins cache_memory_0/porta_read_data]
  connect_bd_net -net cache_memory_0_porta_read_data_valid [get_bd_ports porta_read_data_valid_0] [get_bd_pins cache_memory_0/porta_read_data_valid]
  connect_bd_net -net cache_memory_0_portb_address_ready [get_bd_ports portb_address_ready_0] [get_bd_pins cache_memory_0/portb_address_ready]
  connect_bd_net -net cache_memory_0_portb_read_data [get_bd_ports portb_read_data_0] [get_bd_pins cache_memory_0/portb_read_data]
  connect_bd_net -net cache_memory_0_portb_read_data_valid [get_bd_ports portb_read_data_valid_0] [get_bd_pins cache_memory_0/portb_read_data_valid]
  connect_bd_net -net clk_wiz_0_clk_out2 [get_bd_ports clk_out1_0] [get_bd_pins axi_bram_ctrl_0/s_axi_aclk] [get_bd_pins cache_memory_0/clock] [get_bd_pins clk_wiz_0/clk_out1]
  connect_bd_net -net clk_wiz_0_locked [get_bd_pins axi_bram_ctrl_0/s_axi_aresetn] [get_bd_pins cache_memory_0/resetn] [get_bd_pins clk_wiz_0/locked]
  connect_bd_net -net porta_address_0_1 [get_bd_ports porta_address_0] [get_bd_pins cache_memory_0/porta_address]
  connect_bd_net -net porta_address_valid_0_1 [get_bd_ports porta_address_valid_0] [get_bd_pins cache_memory_0/porta_address_valid]
  connect_bd_net -net porta_read_data_ready_0_1 [get_bd_ports porta_read_data_ready_0] [get_bd_pins cache_memory_0/porta_read_data_ready]
  connect_bd_net -net portb_address_0_1 [get_bd_ports portb_address_0] [get_bd_pins cache_memory_0/portb_address]
  connect_bd_net -net portb_address_valid_0_1 [get_bd_ports portb_address_valid_0] [get_bd_pins cache_memory_0/portb_address_valid]
  connect_bd_net -net portb_read_data_ready_0_1 [get_bd_ports portb_read_data_ready_0] [get_bd_pins cache_memory_0/portb_read_data_ready]
  connect_bd_net -net portb_write_0_1 [get_bd_ports portb_write_0] [get_bd_pins cache_memory_0/portb_write]
  connect_bd_net -net portb_write_data_0_1 [get_bd_ports portb_write_data_0] [get_bd_pins cache_memory_0/portb_write_data]
  connect_bd_net -net portb_write_strobe_0_1 [get_bd_ports portb_write_strobe_0] [get_bd_pins cache_memory_0/portb_write_strobe]

  # Create address segments


  # Restore current instance
  current_bd_instance $oldCurInst

  save_bd_design
common::send_gid_msg -ssname BD::TCL -id 2050 -severity "WARNING" "This Tcl script was generated from a block design that has not been validated. It is possible that design <$design_name> may result in errors during validation."

  close_bd_design $design_name 
}
# End of cr_bd_cache_performance_test_design()
cr_bd_cache_performance_test_design ""
set_property REGISTERED_WITH_MANAGER "1" [get_files cache_performance_test_design.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files cache_performance_test_design.bd ] 

if { [get_files axi_helper.vhd] == "" } {
  import_files -quiet -fileset sources_1 ../MIPS_core/core/axi_helper.vhd
}
if { [get_files mips_debugger.vhd] == "" } {
  import_files -quiet -fileset sources_1 ../MIPS_core/debugger/mips_debugger.vhd
}
if { [get_files mips_utils.vhd] == "" } {
  import_files -quiet -fileset sources_1 ../MIPS_core/core/mips_utils.vhd
}
if { [get_files mips_execution_unit.vhd] == "" } {
  import_files -quiet -fileset sources_1 ../MIPS_core/core/mips_execution_unit.vhd
}
if { [get_files skid_buffer.vhd] == "" } {
  import_files -quiet -fileset sources_1 ../MIPS_core/core/skid_buffer.vhd
}
if { [get_files mips_core.vhd] == "" } {
  import_files -quiet -fileset sources_1 ../MIPS_core/core/mips_core.vhd
}


# Proc to create BD mips_exec_test_design
proc cr_bd_mips_exec_test_design { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# mips_core



  # CHANGE DESIGN NAME HERE
  set design_name mips_exec_test_design

  common::send_gid_msg -ssname BD::TCL -id 2010 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:axi_bram_ctrl:4.1\
  xilinx.com:ip:axi_traffic_gen:3.0\
  xilinx.com:ip:blk_mem_gen:8.4\
  xilinx.com:ip:sim_clk_gen:1.0\
  "

   set list_ips_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2011 -severity "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2012 -severity "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  mips_core\
  "

   set list_mods_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2020 -severity "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2021 -severity "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_gid_msg -ssname BD::TCL -id 2022 -severity "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_gid_msg -ssname BD::TCL -id 2023 -severity "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports

  # Create ports

  # Create instance: axi_bram_ctrl_0, and set properties
  set axi_bram_ctrl_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_0 ]
  set_property -dict [ list \
   CONFIG.PROTOCOL {AXI4LITE} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_0

  # Create instance: axi_interconnect_0, and set properties
  set axi_interconnect_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:2.1 axi_interconnect_0 ]
  set_property -dict [ list \
   CONFIG.NUM_MI {2} \
   CONFIG.NUM_SI {3} \
 ] $axi_interconnect_0

  # Create instance: axi_traffic_gen_1, and set properties
  set axi_traffic_gen_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_traffic_gen:3.0 axi_traffic_gen_1 ]
  set_property -dict [ list \
   CONFIG.C_ATG_MODE {AXI4-Lite} \
   CONFIG.C_ATG_SYSTEM_INIT_ADDR_MIF [file normalize "./../MIPS_core/core/test/core_test_traffic_init_address.coe"] \
   CONFIG.C_ATG_SYSTEM_INIT_DATA_MIF [file normalize "./../MIPS_core/core/test/core_test_traffic_init_data.coe"] \
 ] $axi_traffic_gen_1

  # Create instance: blk_mem_gen_0, and set properties
  set blk_mem_gen_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_0 ]
  set_property -dict [ list \
   CONFIG.Byte_Size {8} \
   CONFIG.Coe_File {no_coe_file_loaded} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {true} \
   CONFIG.Load_Init_File {false} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {true} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {65536} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_0

  # Create instance: mips_core_0, and set properties
  set block_name mips_core
  set block_cell_name mips_core_0
  if { [catch {set mips_core_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mips_core_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: sim_clk_gen_0, and set properties
  set sim_clk_gen_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:sim_clk_gen:1.0 sim_clk_gen_0 ]
  set_property -dict [ list \
   CONFIG.FREQ_HZ {50000000} \
   CONFIG.INITIAL_RESET_CLOCK_CYCLES {10} \
 ] $sim_clk_gen_0

  # Create instance: sim_clk_gen_1, and set properties
  set sim_clk_gen_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:sim_clk_gen:1.0 sim_clk_gen_1 ]
  set_property -dict [ list \
   CONFIG.FREQ_HZ {234545156} \
   CONFIG.INITIAL_RESET_CLOCK_CYCLES {100} \
 ] $sim_clk_gen_1

  # Create interface connections
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_0/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_interconnect_0_M00_AXI [get_bd_intf_pins axi_bram_ctrl_0/S_AXI] [get_bd_intf_pins axi_interconnect_0/M00_AXI]
  connect_bd_intf_net -intf_net axi_interconnect_0_M01_AXI [get_bd_intf_pins axi_interconnect_0/M01_AXI] [get_bd_intf_pins mips_core_0/s_axil_debug]
  connect_bd_intf_net -intf_net axi_traffic_gen_1_M_AXI_LITE_CH1 [get_bd_intf_pins axi_interconnect_0/S02_AXI] [get_bd_intf_pins axi_traffic_gen_1/M_AXI_LITE_CH1]
  connect_bd_intf_net -intf_net mips_core_0_m_axi_memb [get_bd_intf_pins axi_interconnect_0/S01_AXI] [get_bd_intf_pins mips_core_0/m_axi_memb]
  connect_bd_intf_net -intf_net mips_core_0_m_axil_mema [get_bd_intf_pins axi_interconnect_0/S00_AXI] [get_bd_intf_pins mips_core_0/m_axil_mema]

  # Create port connections
  connect_bd_net -net sim_clk_gen_0_clk [get_bd_pins axi_bram_ctrl_0/s_axi_aclk] [get_bd_pins axi_interconnect_0/ACLK] [get_bd_pins axi_interconnect_0/M00_ACLK] [get_bd_pins axi_interconnect_0/M01_ACLK] [get_bd_pins axi_interconnect_0/S00_ACLK] [get_bd_pins axi_interconnect_0/S01_ACLK] [get_bd_pins axi_interconnect_0/S02_ACLK] [get_bd_pins axi_traffic_gen_1/s_axi_aclk] [get_bd_pins mips_core_0/clock] [get_bd_pins sim_clk_gen_0/clk]
  connect_bd_net -net sim_clk_gen_0_sync_rst [get_bd_pins axi_bram_ctrl_0/s_axi_aresetn] [get_bd_pins axi_interconnect_0/ARESETN] [get_bd_pins axi_interconnect_0/M00_ARESETN] [get_bd_pins axi_interconnect_0/M01_ARESETN] [get_bd_pins axi_interconnect_0/S00_ARESETN] [get_bd_pins axi_interconnect_0/S01_ARESETN] [get_bd_pins axi_interconnect_0/S02_ARESETN] [get_bd_pins axi_traffic_gen_1/s_axi_aresetn] [get_bd_pins mips_core_0/resetn] [get_bd_pins sim_clk_gen_0/sync_rst]
  connect_bd_net -net sim_clk_gen_1_clk [get_bd_pins mips_core_0/xdma_clock] [get_bd_pins sim_clk_gen_1/clk]

  # Create address segments
  assign_bd_address -offset 0x00000000 -range 0x00002000 -target_address_space [get_bd_addr_spaces axi_traffic_gen_1/Reg1] [get_bd_addr_segs axi_bram_ctrl_0/S_AXI/Mem0] -force
  assign_bd_address -offset 0x80000000 -range 0x00001000 -target_address_space [get_bd_addr_spaces axi_traffic_gen_1/Reg1] [get_bd_addr_segs mips_core_0/s_axil_debug/reg0] -force
  assign_bd_address -offset 0x00000000 -range 0x00100000 -target_address_space [get_bd_addr_spaces mips_core_0/m_axi_memb] [get_bd_addr_segs axi_bram_ctrl_0/S_AXI/Mem0] -force
  assign_bd_address -offset 0x00000000 -range 0x00100000 -target_address_space [get_bd_addr_spaces mips_core_0/m_axil_mema] [get_bd_addr_segs axi_bram_ctrl_0/S_AXI/Mem0] -force
  assign_bd_address -offset 0x80000000 -range 0x00001000 -target_address_space [get_bd_addr_spaces mips_core_0/m_axi_memb] [get_bd_addr_segs mips_core_0/s_axil_debug/reg0] -force
  assign_bd_address -offset 0x80000000 -range 0x00001000 -target_address_space [get_bd_addr_spaces mips_core_0/m_axil_mema] [get_bd_addr_segs mips_core_0/s_axil_debug/reg0] -force

  # Perform GUI Layout
  regenerate_bd_layout -layout_string {
   "ActiveEmotionalView":"Default View",
   "Default View_ScaleFactor":"0.789668",
   "Default View_TopLeft":"44,-222",
   "ExpandedHierarchyInLayout":"",
   "guistr":"# # String gsaved with Nlview 7.0r6  2020-01-29 bk=1.5227 VDI=41 GEI=36 GUI=JA:10.0 non-TLS
#  -string -flagsOSRD
preplace inst sim_clk_gen_0 -pg 1 -lvl 2 -x 230 -y 110 -defaultsOSRD
preplace inst axi_bram_ctrl_0 -pg 1 -lvl 5 -x 1190 -y 230 -defaultsOSRD
preplace inst blk_mem_gen_0 -pg 1 -lvl 6 -x 1450 -y 230 -defaultsOSRD
preplace inst axi_interconnect_0 -pg 1 -lvl 4 -x 860 -y 230 -defaultsOSRD
preplace inst axi_traffic_gen_1 -pg 1 -lvl 3 -x 520 -y 250 -defaultsOSRD
preplace inst sim_clk_gen_1 -pg 1 -lvl 1 -x 20 -y 290 -defaultsOSRD
preplace inst mips_core_0 -pg 1 -lvl 3 -x 520 -y 90 -defaultsOSRD
preplace netloc sim_clk_gen_0_clk 1 2 3 350 -10 700 20 1040
preplace netloc sim_clk_gen_0_sync_rst 1 2 3 330 -30 710 30 1020
preplace netloc sim_clk_gen_1_clk 1 1 2 N 280 340J
preplace netloc axi_bram_ctrl_0_BRAM_PORTA 1 5 1 NJ 230
preplace netloc axi_interconnect_0_M00_AXI 1 4 1 1030 210n
preplace netloc axi_interconnect_0_M01_AXI 1 2 3 360 -20 NJ -20 1010
preplace netloc axi_traffic_gen_1_M_AXI_LITE_CH1 1 3 1 680 130n
preplace netloc mips_core_0_m_axi_memb 1 3 1 690 60n
preplace netloc mips_core_0_m_axil_mema 1 3 1 680 80n
levelinfo -pg 1 -90 20 230 520 860 1190 1450 1560
pagesize -pg 1 -db -bbox -sgen -90 -120 1560 710
"
}

  # Restore current instance
  current_bd_instance $oldCurInst

  save_bd_design
common::send_gid_msg -ssname BD::TCL -id 2050 -severity "WARNING" "This Tcl script was generated from a block design that has not been validated. It is possible that design <$design_name> may result in errors during validation."

  close_bd_design $design_name 
}
# End of cr_bd_mips_exec_test_design()
cr_bd_mips_exec_test_design ""
set_property REGISTERED_WITH_MANAGER "1" [get_files mips_exec_test_design.bd ] 

if { [get_files mips_debugger.vhd] == "" } {
  import_files -quiet -fileset sources_1 ../MIPS_core/debugger/mips_debugger.vhd
}


# Proc to create BD design_debugger
proc cr_bd_design_debugger { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# mips_debugger



  # CHANGE DESIGN NAME HERE
  set design_name design_debugger

  common::send_gid_msg -ssname BD::TCL -id 2010 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:axi_traffic_gen:3.0\
  xilinx.com:ip:dist_mem_gen:8.0\
  xilinx.com:ip:sim_clk_gen:1.0\
  "

   set list_ips_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2011 -severity "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2012 -severity "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  mips_debugger\
  "

   set list_mods_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2020 -severity "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2021 -severity "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_gid_msg -ssname BD::TCL -id 2022 -severity "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_gid_msg -ssname BD::TCL -id 2023 -severity "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports

  # Create ports
  set debug_0 [ create_bd_port -dir O -from 7 -to 0 debug_0 ]
  set done_0 [ create_bd_port -dir O done_0 ]
  set processor_enable_0 [ create_bd_port -dir O processor_enable_0 ]
  set status_0 [ create_bd_port -dir O -from 31 -to 0 status_0 ]

  # Create instance: axi_traffic_gen_0, and set properties
  set axi_traffic_gen_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_traffic_gen:3.0 axi_traffic_gen_0 ]
  set_property -dict [ list \
   CONFIG.C_ATG_MODE {AXI4-Lite} \
   CONFIG.C_ATG_SYSINIT_MODES {System_Test} \
   CONFIG.C_ATG_SYSTEM_CMD_MAX_RETRY {2147483647} \
   CONFIG.C_ATG_SYSTEM_INIT_ADDR_MIF [file normalize "./../MIPS_core/debugger/test/debugger_test_traffic_address.coe"] \
   CONFIG.C_ATG_SYSTEM_INIT_CTRL_MIF [file normalize "./../MIPS_core/debugger/test/debugger_test_traffic_control.coe"] \
   CONFIG.C_ATG_SYSTEM_INIT_DATA_MIF [file normalize "./../MIPS_core/debugger/test/debugger_test_traffic_data.coe"] \
   CONFIG.C_ATG_SYSTEM_INIT_MASK_MIF [file normalize "./../MIPS_core/debugger/test/debugger_test_traffic_mask.coe"] \
   CONFIG.C_ATG_SYSTEM_TEST_MAX_CLKS {500} \
 ] $axi_traffic_gen_0

  # Create instance: dist_mem_gen_0, and set properties
  set dist_mem_gen_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:dist_mem_gen:8.0 dist_mem_gen_0 ]
  set_property -dict [ list \
   CONFIG.data_width {32} \
   CONFIG.depth {32} \
 ] $dist_mem_gen_0

  # Create instance: mips_debugger_0, and set properties
  set block_name mips_debugger
  set block_cell_name mips_debugger_0
  if { [catch {set mips_debugger_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $mips_debugger_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: sim_clk_gen_0, and set properties
  set sim_clk_gen_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:sim_clk_gen:1.0 sim_clk_gen_0 ]

  # Create interface connections
  connect_bd_intf_net -intf_net axi_traffic_gen_0_M_AXI_LITE_CH1 [get_bd_intf_pins axi_traffic_gen_0/M_AXI_LITE_CH1] [get_bd_intf_pins mips_debugger_0/s_axi]

  # Create port connections
  connect_bd_net -net axi_traffic_gen_0_done [get_bd_ports done_0] [get_bd_pins axi_traffic_gen_0/done]
  connect_bd_net -net axi_traffic_gen_0_status [get_bd_ports status_0] [get_bd_pins axi_traffic_gen_0/status]
  connect_bd_net -net dist_mem_gen_0_spo [get_bd_pins dist_mem_gen_0/spo] [get_bd_pins mips_debugger_0/register_out]
  connect_bd_net -net mips_debugger_0_debug [get_bd_ports debug_0] [get_bd_pins mips_debugger_0/debug]
  connect_bd_net -net mips_debugger_0_processor_enable [get_bd_ports processor_enable_0] [get_bd_pins mips_debugger_0/processor_enable]
  connect_bd_net -net mips_debugger_0_register_address [get_bd_pins dist_mem_gen_0/a] [get_bd_pins mips_debugger_0/register_address]
  connect_bd_net -net mips_debugger_0_register_in [get_bd_pins dist_mem_gen_0/d] [get_bd_pins mips_debugger_0/register_in]
  connect_bd_net -net mips_debugger_0_register_write [get_bd_pins dist_mem_gen_0/we] [get_bd_pins mips_debugger_0/register_write]
  connect_bd_net -net sim_clk_gen_0_clk [get_bd_pins axi_traffic_gen_0/s_axi_aclk] [get_bd_pins dist_mem_gen_0/clk] [get_bd_pins mips_debugger_0/clock] [get_bd_pins sim_clk_gen_0/clk]
  connect_bd_net -net sim_clk_gen_0_sync_rst [get_bd_pins axi_traffic_gen_0/s_axi_aresetn] [get_bd_pins mips_debugger_0/resetn] [get_bd_pins sim_clk_gen_0/sync_rst]

  # Create address segments
  assign_bd_address -offset 0x00000000 -range 0x000100000000 -target_address_space [get_bd_addr_spaces axi_traffic_gen_0/Reg1] [get_bd_addr_segs mips_debugger_0/s_axi/reg0] -force

  # Perform GUI Layout
  regenerate_bd_layout -layout_string {
   "ActiveEmotionalView":"Default View",
   "Default View_ScaleFactor":"1.0",
   "Default View_TopLeft":"-140,-157",
   "ExpandedHierarchyInLayout":"",
   "guistr":"# # String gsaved with Nlview 7.0r6  2020-01-29 bk=1.5227 VDI=41 GEI=36 GUI=JA:10.0 non-TLS
#  -string -flagsOSRD
preplace port port-id_processor_enable_0 -pg 1 -lvl 4 -x 900 -y 220 -defaultsOSRD
preplace port port-id_done_0 -pg 1 -lvl 4 -x 900 -y 300 -defaultsOSRD
preplace portBus debug_0 -pg 1 -lvl 4 -x 900 -y 240 -defaultsOSRD
preplace portBus status_0 -pg 1 -lvl 4 -x 900 -y 320 -defaultsOSRD
preplace inst sim_clk_gen_0 -pg 1 -lvl 1 -x 30 -y 210 -defaultsOSRD
preplace inst axi_traffic_gen_0 -pg 1 -lvl 2 -x 320 -y 300 -defaultsOSRD
preplace inst dist_mem_gen_0 -pg 1 -lvl 2 -x 320 -y 120 -defaultsOSRD
preplace inst mips_debugger_0 -pg 1 -lvl 3 -x 680 -y 200 -defaultsOSRD
preplace netloc axi_traffic_gen_0_done 1 2 2 490J 320 850J
preplace netloc axi_traffic_gen_0_status 1 2 2 470J 330 870J
preplace netloc dist_mem_gen_0_spo 1 2 1 500 120n
preplace netloc mips_debugger_0_debug 1 3 1 860J 240n
preplace netloc mips_debugger_0_processor_enable 1 3 1 860J 210n
preplace netloc mips_debugger_0_register_address 1 1 3 160 10 NJ 10 870
preplace netloc mips_debugger_0_register_in 1 1 3 170 30 NJ 30 850
preplace netloc mips_debugger_0_register_write 1 1 3 150 20 NJ 20 860
preplace netloc sim_clk_gen_0_clk 1 1 2 140 210 490J
preplace netloc sim_clk_gen_0_sync_rst 1 1 2 130 220 480J
preplace netloc axi_traffic_gen_0_M_AXI_LITE_CH1 1 2 1 470 140n
levelinfo -pg 1 -80 30 320 680 900
pagesize -pg 1 -db -bbox -sgen -80 0 1080 690
"
}

  # Restore current instance
  current_bd_instance $oldCurInst

  save_bd_design
common::send_gid_msg -ssname BD::TCL -id 2050 -severity "WARNING" "This Tcl script was generated from a block design that has not been validated. It is possible that design <$design_name> may result in errors during validation."

  close_bd_design $design_name 
}
# End of cr_bd_design_debugger()
cr_bd_design_debugger ""
set_property REGISTERED_WITH_MANAGER "1" [get_files design_debugger.bd ] 

if { [get_files axi_helper.vhd] == "" } {
  import_files -quiet -fileset sources_1 ../MIPS_core/core/axi_helper.vhd
}
if { [get_files cache_memory.vhd] == "" } {
  import_files -quiet -fileset sources_1 ../MIPS_core/cache/cache_memory.vhd
}


# Proc to create BD cache_design
proc cr_bd_cache_design { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# cache_memory



  # CHANGE DESIGN NAME HERE
  set design_name cache_design

  common::send_gid_msg -ssname BD::TCL -id 2010 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:axi_bram_ctrl:4.1\
  xilinx.com:ip:blk_mem_gen:8.4\
  xilinx.com:ip:sim_clk_gen:1.0\
  "

   set list_ips_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2011 -severity "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2012 -severity "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  cache_memory\
  "

   set list_mods_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2020 -severity "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2021 -severity "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_gid_msg -ssname BD::TCL -id 2022 -severity "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_gid_msg -ssname BD::TCL -id 2023 -severity "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports

  # Create ports
  set porta_address_0 [ create_bd_port -dir I -from 31 -to 0 porta_address_0 ]
  set porta_address_ready_0 [ create_bd_port -dir O porta_address_ready_0 ]
  set porta_address_valid_0 [ create_bd_port -dir I porta_address_valid_0 ]
  set porta_read_data_0 [ create_bd_port -dir O -from 31 -to 0 porta_read_data_0 ]
  set porta_read_data_ready_0 [ create_bd_port -dir I porta_read_data_ready_0 ]
  set porta_read_data_valid_0 [ create_bd_port -dir O porta_read_data_valid_0 ]
  set portb_address_0 [ create_bd_port -dir I -from 31 -to 0 portb_address_0 ]
  set portb_address_ready_0 [ create_bd_port -dir O portb_address_ready_0 ]
  set portb_address_valid_0 [ create_bd_port -dir I portb_address_valid_0 ]
  set portb_read_data_0 [ create_bd_port -dir O -from 31 -to 0 portb_read_data_0 ]
  set portb_read_data_ready_0 [ create_bd_port -dir I portb_read_data_ready_0 ]
  set portb_read_data_valid_0 [ create_bd_port -dir O portb_read_data_valid_0 ]
  set portb_write_0 [ create_bd_port -dir I portb_write_0 ]
  set portb_write_data_0 [ create_bd_port -dir I -from 31 -to 0 portb_write_data_0 ]
  set portb_write_strobe_0 [ create_bd_port -dir I -from 3 -to 0 portb_write_strobe_0 ]

  # Create instance: axi_bram_ctrl_0, and set properties
  set axi_bram_ctrl_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_0 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {512} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_0

  # Create instance: blk_mem_gen_0, and set properties
  set blk_mem_gen_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_0 ]
  set_property -dict [ list \
   CONFIG.Byte_Size {8} \
   CONFIG.Coe_File [file normalize "./../MIPS_core/cache/cache_memory_data.coe"] \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {true} \
   CONFIG.Load_Init_File {true} \
   CONFIG.Read_Width_A {512} \
   CONFIG.Read_Width_B {512} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {true} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {128} \
   CONFIG.Write_Width_A {512} \
   CONFIG.Write_Width_B {512} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_0

  # Create instance: blk_mem_gen_1, and set properties
  set blk_mem_gen_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_1 ]
  set_property -dict [ list \
   CONFIG.Byte_Size {8} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Read_Width_A {512} \
   CONFIG.Read_Width_B {512} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {true} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {256} \
   CONFIG.Write_Width_A {512} \
   CONFIG.Write_Width_B {512} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_1

  # Create instance: cache_memory_0, and set properties
  set block_name cache_memory
  set block_cell_name cache_memory_0
  if { [catch {set cache_memory_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $cache_memory_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: sim_clk_gen_0, and set properties
  set sim_clk_gen_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:sim_clk_gen:1.0 sim_clk_gen_0 ]
  set_property -dict [ list \
   CONFIG.INITIAL_RESET_CLOCK_CYCLES {10} \
 ] $sim_clk_gen_0

  # Create interface connections
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_0/BRAM_PORTA]
  connect_bd_intf_net -intf_net cache_memory_0_BRAM [get_bd_intf_pins blk_mem_gen_1/BRAM_PORTA] [get_bd_intf_pins cache_memory_0/BRAM]
  connect_bd_intf_net -intf_net cache_memory_0_M_AXI [get_bd_intf_pins axi_bram_ctrl_0/S_AXI] [get_bd_intf_pins cache_memory_0/M_AXI]

  # Create port connections
  connect_bd_net -net cache_memory_0_porta_address_ready [get_bd_ports porta_address_ready_0] [get_bd_pins cache_memory_0/porta_address_ready]
  connect_bd_net -net cache_memory_0_porta_read_data [get_bd_ports porta_read_data_0] [get_bd_pins cache_memory_0/porta_read_data]
  connect_bd_net -net cache_memory_0_porta_read_data_valid [get_bd_ports porta_read_data_valid_0] [get_bd_pins cache_memory_0/porta_read_data_valid]
  connect_bd_net -net cache_memory_0_portb_address_ready [get_bd_ports portb_address_ready_0] [get_bd_pins cache_memory_0/portb_address_ready]
  connect_bd_net -net cache_memory_0_portb_read_data [get_bd_ports portb_read_data_0] [get_bd_pins cache_memory_0/portb_read_data]
  connect_bd_net -net cache_memory_0_portb_read_data_valid [get_bd_ports portb_read_data_valid_0] [get_bd_pins cache_memory_0/portb_read_data_valid]
  connect_bd_net -net porta_address_0_1 [get_bd_ports porta_address_0] [get_bd_pins cache_memory_0/porta_address]
  connect_bd_net -net porta_address_valid_0_1 [get_bd_ports porta_address_valid_0] [get_bd_pins cache_memory_0/porta_address_valid]
  connect_bd_net -net porta_read_data_ready_0_1 [get_bd_ports porta_read_data_ready_0] [get_bd_pins cache_memory_0/porta_read_data_ready]
  connect_bd_net -net portb_address_0_1 [get_bd_ports portb_address_0] [get_bd_pins cache_memory_0/portb_address]
  connect_bd_net -net portb_address_valid_0_1 [get_bd_ports portb_address_valid_0] [get_bd_pins cache_memory_0/portb_address_valid]
  connect_bd_net -net portb_read_data_ready_0_1 [get_bd_ports portb_read_data_ready_0] [get_bd_pins cache_memory_0/portb_read_data_ready]
  connect_bd_net -net portb_write_0_1 [get_bd_ports portb_write_0] [get_bd_pins cache_memory_0/portb_write]
  connect_bd_net -net portb_write_data_0_1 [get_bd_ports portb_write_data_0] [get_bd_pins cache_memory_0/portb_write_data]
  connect_bd_net -net portb_write_strobe_0_1 [get_bd_ports portb_write_strobe_0] [get_bd_pins cache_memory_0/portb_write_strobe]
  connect_bd_net -net sim_clk_gen_0_clk [get_bd_pins axi_bram_ctrl_0/s_axi_aclk] [get_bd_pins cache_memory_0/clock] [get_bd_pins sim_clk_gen_0/clk]
  connect_bd_net -net sim_clk_gen_0_sync_rst [get_bd_pins axi_bram_ctrl_0/s_axi_aresetn] [get_bd_pins cache_memory_0/resetn] [get_bd_pins sim_clk_gen_0/sync_rst]

  # Create address segments
  assign_bd_address -offset 0x00000000 -range 0x00010000 -target_address_space [get_bd_addr_spaces cache_memory_0/M_AXI] [get_bd_addr_segs axi_bram_ctrl_0/S_AXI/Mem0] -force

  # Perform GUI Layout
  regenerate_bd_layout -layout_string {
   "ActiveEmotionalView":"Default View",
   "Default View_ScaleFactor":"0.821521",
   "Default View_TopLeft":"-228,-172",
   "ExpandedHierarchyInLayout":"",
   "guistr":"# # String gsaved with Nlview 7.0r6  2020-01-29 bk=1.5227 VDI=41 GEI=36 GUI=JA:10.0 non-TLS
#  -string -flagsOSRD
preplace port port-id_porta_address_valid_0 -pg 1 -lvl 0 -x 0 -y 250 -defaultsOSRD
preplace port port-id_porta_read_data_ready_0 -pg 1 -lvl 0 -x 0 -y 270 -defaultsOSRD
preplace port port-id_portb_address_valid_0 -pg 1 -lvl 0 -x 0 -y 310 -defaultsOSRD
preplace port port-id_portb_read_data_ready_0 -pg 1 -lvl 0 -x 0 -y 330 -defaultsOSRD
preplace port port-id_portb_write_0 -pg 1 -lvl 0 -x 0 -y 390 -defaultsOSRD
preplace port port-id_porta_address_ready_0 -pg 1 -lvl 5 -x 1200 -y 20 -defaultsOSRD
preplace port port-id_porta_read_data_valid_0 -pg 1 -lvl 5 -x 1200 -y 300 -defaultsOSRD
preplace port port-id_portb_address_ready_0 -pg 1 -lvl 5 -x 1200 -y 320 -defaultsOSRD
preplace port port-id_portb_read_data_valid_0 -pg 1 -lvl 5 -x 1200 -y 360 -defaultsOSRD
preplace portBus porta_address_0 -pg 1 -lvl 0 -x 0 -y 230 -defaultsOSRD
preplace portBus portb_address_0 -pg 1 -lvl 0 -x 0 -y 290 -defaultsOSRD
preplace portBus portb_write_data_0 -pg 1 -lvl 0 -x 0 -y 350 -defaultsOSRD
preplace portBus portb_write_strobe_0 -pg 1 -lvl 0 -x 0 -y 370 -defaultsOSRD
preplace portBus porta_read_data_0 -pg 1 -lvl 5 -x 1200 -y 280 -defaultsOSRD
preplace portBus portb_read_data_0 -pg 1 -lvl 5 -x 1200 -y 340 -defaultsOSRD
preplace inst axi_bram_ctrl_0 -pg 1 -lvl 3 -x 800 -y 100 -defaultsOSRD
preplace inst blk_mem_gen_0 -pg 1 -lvl 4 -x 1050 -y 100 -defaultsOSRD
preplace inst blk_mem_gen_1 -pg 1 -lvl 3 -x 800 -y 220 -defaultsOSRD
preplace inst sim_clk_gen_0 -pg 1 -lvl 1 -x 120 -y 110 -defaultsOSRD
preplace inst cache_memory_0 -pg 1 -lvl 2 -x 430 -y 290 -defaultsOSRD
preplace netloc cache_memory_0_porta_address_ready 1 2 3 620J 10 NJ 10 1180J
preplace netloc cache_memory_0_porta_read_data 1 2 3 640J 20 NJ 20 1170J
preplace netloc cache_memory_0_porta_read_data_valid 1 2 3 630J 300 NJ 300 NJ
preplace netloc cache_memory_0_portb_address_ready 1 2 3 650J 280 NJ 280 1160J
preplace netloc cache_memory_0_portb_read_data 1 2 3 620J 290 NJ 290 1150J
preplace netloc cache_memory_0_portb_read_data_valid 1 2 3 620J 360 NJ 360 NJ
preplace netloc porta_address_0_1 1 0 2 NJ 230 230J
preplace netloc porta_address_valid_0_1 1 0 2 NJ 250 220J
preplace netloc porta_read_data_ready_0_1 1 0 2 NJ 270 230J
preplace netloc portb_address_0_1 1 0 2 20J 280 NJ
preplace netloc portb_address_valid_0_1 1 0 2 NJ 310 220J
preplace netloc portb_read_data_ready_0_1 1 0 2 NJ 330 230J
preplace netloc portb_write_0_1 1 0 2 NJ 390 220J
preplace netloc portb_write_data_0_1 1 0 2 NJ 350 220J
preplace netloc portb_write_strobe_0_1 1 0 2 NJ 370 230J
preplace netloc sim_clk_gen_0_clk 1 1 2 220 90 660
preplace netloc sim_clk_gen_0_sync_rst 1 1 2 230 100 650
preplace netloc axi_bram_ctrl_0_BRAM_PORTA 1 3 1 NJ 100
preplace netloc cache_memory_0_BRAM 1 2 1 660J 160n
preplace netloc cache_memory_0_M_AXI 1 2 1 630 80n
levelinfo -pg 1 0 120 430 800 1050 1200
pagesize -pg 1 -db -bbox -sgen -220 0 1410 480
"
}

  # Restore current instance
  current_bd_instance $oldCurInst

  save_bd_design
common::send_gid_msg -ssname BD::TCL -id 2050 -severity "WARNING" "This Tcl script was generated from a block design that has not been validated. It is possible that design <$design_name> may result in errors during validation."

  close_bd_design $design_name 
}
# End of cr_bd_cache_design()
cr_bd_cache_design ""
set_property REGISTERED_WITH_MANAGER "1" [get_files cache_design.bd ] 

if { [get_files axi_helper.vhd] == "" } {
  import_files -quiet -fileset sources_1 ../MIPS_core/core/axi_helper.vhd
}
if { [get_files axi_lite_adapter.vhd] == "" } {
  import_files -quiet -fileset sources_1 ../MIPS_core/core/axi_lite_adapter/axi_lite_adapter.vhd
}


# Proc to create BD il_test_design
proc cr_bd_il_test_design { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# axi_lite_adapter



  # CHANGE DESIGN NAME HERE
  set design_name il_test_design

  common::send_gid_msg -ssname BD::TCL -id 2010 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:axi_bram_ctrl:4.1\
  xilinx.com:ip:blk_mem_gen:8.4\
  xilinx.com:ip:sim_clk_gen:1.0\
  "

   set list_ips_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2011 -severity "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2012 -severity "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  axi_lite_adapter\
  "

   set list_mods_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2020 -severity "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2021 -severity "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_gid_msg -ssname BD::TCL -id 2022 -severity "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_gid_msg -ssname BD::TCL -id 2023 -severity "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports

  # Create ports
  set address_in_0 [ create_bd_port -dir I -from 31 -to 0 address_in_0 ]
  set address_ready_0 [ create_bd_port -dir O address_ready_0 ]
  set address_valid_0 [ create_bd_port -dir I address_valid_0 ]
  set data_out_0 [ create_bd_port -dir O -from 31 -to 0 data_out_0 ]
  set data_ready_0 [ create_bd_port -dir I data_ready_0 ]
  set data_valid_0 [ create_bd_port -dir O data_valid_0 ]
  set discard_0 [ create_bd_port -dir I discard_0 ]
  set error_0 [ create_bd_port -dir O error_0 ]

  # Create instance: axi_bram_ctrl_0, and set properties
  set axi_bram_ctrl_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_0 ]
  set_property -dict [ list \
   CONFIG.PROTOCOL {AXI4LITE} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_0

  # Create instance: axi_lite_adapter_0, and set properties
  set block_name axi_lite_adapter
  set block_cell_name axi_lite_adapter_0
  if { [catch {set axi_lite_adapter_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $axi_lite_adapter_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: blk_mem_gen_0, and set properties
  set blk_mem_gen_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_0 ]
  set_property -dict [ list \
   CONFIG.Byte_Size {8} \
   CONFIG.Coe_File [file normalize "./../MIPS_core/core/axi_lite_adapter/axi_lite_adapter_test_data.coe"] \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {true} \
   CONFIG.Load_Init_File {true} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Use_Byte_Write_Enable {true} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_0

  # Create instance: sim_clk_gen_0, and set properties
  set sim_clk_gen_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:sim_clk_gen:1.0 sim_clk_gen_0 ]
  set_property -dict [ list \
   CONFIG.INITIAL_RESET_CLOCK_CYCLES {5} \
 ] $sim_clk_gen_0

  # Create interface connections
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_0/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_lite_adapter_0_m_axil [get_bd_intf_pins axi_bram_ctrl_0/S_AXI] [get_bd_intf_pins axi_lite_adapter_0/m_axil]

  # Create port connections
  connect_bd_net -net address_in_0_1 [get_bd_ports address_in_0] [get_bd_pins axi_lite_adapter_0/address_in]
  connect_bd_net -net address_valid_0_1 [get_bd_ports address_valid_0] [get_bd_pins axi_lite_adapter_0/address_valid]
  connect_bd_net -net axi_lite_adapter_0_address_ready [get_bd_ports address_ready_0] [get_bd_pins axi_lite_adapter_0/address_ready]
  connect_bd_net -net axi_lite_adapter_0_data_out [get_bd_ports data_out_0] [get_bd_pins axi_lite_adapter_0/data_out]
  connect_bd_net -net axi_lite_adapter_0_data_valid [get_bd_ports data_valid_0] [get_bd_pins axi_lite_adapter_0/data_valid]
  connect_bd_net -net axi_lite_adapter_0_error [get_bd_ports error_0] [get_bd_pins axi_lite_adapter_0/error]
  connect_bd_net -net data_ready_0_1 [get_bd_ports data_ready_0] [get_bd_pins axi_lite_adapter_0/data_ready]
  connect_bd_net -net discard_0_1 [get_bd_ports discard_0] [get_bd_pins axi_lite_adapter_0/discard]
  connect_bd_net -net sim_clk_gen_0_clk [get_bd_pins axi_bram_ctrl_0/s_axi_aclk] [get_bd_pins axi_lite_adapter_0/clock] [get_bd_pins sim_clk_gen_0/clk]
  connect_bd_net -net sim_clk_gen_0_sync_rst [get_bd_pins axi_bram_ctrl_0/s_axi_aresetn] [get_bd_pins axi_lite_adapter_0/resetn] [get_bd_pins sim_clk_gen_0/sync_rst]

  # Create address segments
  assign_bd_address -offset 0x00000000 -range 0x00002000 -target_address_space [get_bd_addr_spaces axi_lite_adapter_0/m_axil] [get_bd_addr_segs axi_bram_ctrl_0/S_AXI/Mem0] -force

  # Perform GUI Layout
  regenerate_bd_layout -layout_string {
   "ActiveEmotionalView":"Default View",
   "Default View_ScaleFactor":"0.893781",
   "Default View_TopLeft":"-171,-236",
   "ExpandedHierarchyInLayout":"",
   "guistr":"# # String gsaved with Nlview 7.0r6  2020-01-29 bk=1.5227 VDI=41 GEI=36 GUI=JA:10.0 non-TLS
#  -string -flagsOSRD
preplace port port-id_data_ready_0 -pg 1 -lvl 0 -x 0 -y 260 -defaultsOSRD
preplace port port-id_discard_0 -pg 1 -lvl 0 -x 0 -y 200 -defaultsOSRD
preplace port port-id_address_valid_0 -pg 1 -lvl 0 -x 0 -y 240 -defaultsOSRD
preplace port port-id_address_ready_0 -pg 1 -lvl 5 -x 1100 -y 190 -defaultsOSRD
preplace port port-id_data_valid_0 -pg 1 -lvl 5 -x 1100 -y 210 -defaultsOSRD
preplace port port-id_error_0 -pg 1 -lvl 5 -x 1100 -y 250 -defaultsOSRD
preplace portBus address_in_0 -pg 1 -lvl 0 -x 0 -y 220 -defaultsOSRD
preplace portBus data_out_0 -pg 1 -lvl 5 -x 1100 -y 230 -defaultsOSRD
preplace inst sim_clk_gen_0 -pg 1 -lvl 1 -x 120 -y 90 -defaultsOSRD
preplace inst axi_bram_ctrl_0 -pg 1 -lvl 3 -x 710 -y 80 -defaultsOSRD
preplace inst blk_mem_gen_0 -pg 1 -lvl 4 -x 960 -y 80 -defaultsOSRD
preplace inst axi_lite_adapter_0 -pg 1 -lvl 2 -x 400 -y 210 -defaultsOSRD
preplace netloc address_in_0_1 1 0 2 NJ 220 230J
preplace netloc address_valid_0_1 1 0 2 NJ 240 240J
preplace netloc axi_lite_adapter_0_address_ready 1 2 3 NJ 190 NJ 190 NJ
preplace netloc axi_lite_adapter_0_data_out 1 2 3 NJ 230 NJ 230 NJ
preplace netloc axi_lite_adapter_0_data_valid 1 2 3 NJ 210 NJ 210 NJ
preplace netloc axi_lite_adapter_0_error 1 2 3 NJ 250 NJ 250 NJ
preplace netloc data_ready_0_1 1 0 2 NJ 260 230J
preplace netloc discard_0_1 1 0 2 NJ 200 220J
preplace netloc sim_clk_gen_0_clk 1 1 2 230 70 550
preplace netloc sim_clk_gen_0_sync_rst 1 1 2 220 60 560
preplace netloc axi_bram_ctrl_0_BRAM_PORTA 1 3 1 NJ 80
preplace netloc axi_lite_adapter_0_m_axil 1 2 1 570 60n
levelinfo -pg 1 0 120 400 710 960 1100
pagesize -pg 1 -db -bbox -sgen -180 0 1260 350
"
}

  # Restore current instance
  current_bd_instance $oldCurInst

  save_bd_design
common::send_gid_msg -ssname BD::TCL -id 2050 -severity "WARNING" "This Tcl script was generated from a block design that has not been validated. It is possible that design <$design_name> may result in errors during validation."

  close_bd_design $design_name 
}
# End of cr_bd_il_test_design()
cr_bd_il_test_design ""
set_property REGISTERED_WITH_MANAGER "1" [get_files il_test_design.bd ] 

set idrFlowPropertiesConstraints ""
catch {
 set idrFlowPropertiesConstraints [get_param runs.disableIDRFlowPropertyConstraints]
 set_param runs.disableIDRFlowPropertyConstraints 1
}

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xc7k325tffg900-2 -flow {Vivado Synthesis 2021} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2021" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "needs_refresh" -value "1" -objects $obj
set_property -name "auto_incremental_checkpoint" -value "1" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xc7k325tffg900-2 -flow {Vivado Implementation 2021} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2021" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "needs_refresh" -value "1" -objects $obj
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]
catch {
 if { $idrFlowPropertiesConstraints != {} } {
   set_param runs.disableIDRFlowPropertyConstraints $idrFlowPropertiesConstraints
 }
}

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
